import os
import json
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QListWidget, QPushButton,
    QTabWidget, QWidget, QMessageBox, QListWidgetItem
)
from PyQt5.QtCore import Qt

class TemplateDialog(QDialog):
    def __init__(self, parent=None, template_type="race"):
        super().__init__(parent)
        self.parent = parent
        self.template_type = template_type
        self.selected_template = None
        
        # Set window properties
        self.setWindowTitle(f"Select {template_type.title()} Template")
        self.setMinimumWidth(400)
        self.setMinimumHeight(500)
        
        # Main layout
        layout = QVBoxLayout(self)
        
        # Create tabs for different template categories
        self.tabs = QTabWidget()
        layout.addWidget(self.tabs)
        
        # Load templates
        self.templates = self.load_templates()
        
        # Create a tab for each template category
        self.create_template_tabs()
        
        # Buttons
        button_layout = QHBoxLayout()
        self.apply_button = QPushButton("Apply Template")
        self.apply_button.setEnabled(False)
        self.apply_button.clicked.connect(self.apply_template)
        
        self.cancel_button = QPushButton("Cancel")
        self.cancel_button.clicked.connect(self.reject)
        
        button_layout.addWidget(self.apply_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)
    
    def load_templates(self):
        """Load templates from JSON files"""
        templates = {"templates": []}
        base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        template_path = os.path.join(base_path, "data", "templates")
    
        # Create templates directory if it doesn't exist
        os.makedirs(template_path, exist_ok=True)
        
        # Load templates based on type
        file_path = os.path.join(template_path, f"{self.template_type}_templates.json")
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r') as f:
                    data = json.load(f)
                    
                    # Extract templates based on the file structure
                    if self.template_type == "size":
                        # Size templates structure: {"sizeTemplates": {"sizes": [...]}}
                        size_templates = data.get("sizeTemplates", {}).get("sizes", [])
                        templates["templates"] = [{
                            "name": size.get("name", "Unknown Size"),
                            "category": "Sizes",
                            "data": size
                        } for size in size_templates]
                    elif self.template_type == "race":
                        # Race templates structure: {"raceTemplates": {"races": [...]}}
                        race_templates = data.get("raceTemplates", {}).get("races", [])
                        templates["templates"] = [{
                            "name": race.get("name", "Unknown Race"),
                            "category": "Races",
                            "data": race
                        } for race in race_templates]
                    elif self.template_type == "class":
                        # Class templates structure: {"classTemplates": {"classes": [...]}}
                        class_templates = data.get("classTemplates", {}).get("classes", [])
                        templates["templates"] = [{
                            "name": cls.get("name", "Unknown Class"),
                            "category": "Classes",
                            "data": cls
                        } for cls in class_templates]
                    else:
                        # Default case - try to load templates directly
                        templates = data
            except Exception as e:
                QMessageBox.warning(self, "Error", f"Failed to load templates: {e}")
        else:
            # Create empty template file
            try:
                with open(file_path, 'w') as f:
                    json.dump(templates, f, indent=4)
            except Exception as e:
                QMessageBox.warning(self, "Error", f"Failed to create template file: {e}")
        
        return templates
    
    def create_template_tabs(self):
        """Create tabs for different template categories"""
        # Clear existing tabs
        self.tabs.clear()
        
        # Get templates for the current type
        type_templates = self.templates.get("templates", [])
        
        # Group templates by category
        categories = {}
        for template in type_templates:
            category = template.get("category", "General")
            if category not in categories:
                categories[category] = []
            categories[category].append(template)
        
        # Create a tab for each category
        for category, templates in categories.items():
            tab = QWidget()
            tab_layout = QVBoxLayout(tab)
            
            # Create list widget for templates
            list_widget = QListWidget()
            list_widget.setSelectionMode(QListWidget.SingleSelection)
            list_widget.itemClicked.connect(self.on_template_selected)
            
            # Add templates to list
            for template in templates:
                item = QListWidgetItem(template.get("name", "Unnamed Template"))
                item.setData(Qt.UserRole, template)
                list_widget.addItem(item)
            
            tab_layout.addWidget(list_widget)
            self.tabs.addTab(tab, category)
        
        # Add "All" tab if there are multiple categories
        if len(categories) > 1:
            all_tab = QWidget()
            all_layout = QVBoxLayout(all_tab)
            
            all_list = QListWidget()
            all_list.setSelectionMode(QListWidget.SingleSelection)
            all_list.itemClicked.connect(self.on_template_selected)
            
            for template in type_templates:
                item = QListWidgetItem(template.get("name", "Unnamed Template"))
                item.setData(Qt.UserRole, template)
                all_list.addItem(item)
            
            all_layout.addWidget(all_list)
            self.tabs.insertTab(0, all_tab, "All")
            self.tabs.setCurrentIndex(0)
        
        # If no templates, show message
        if not type_templates:
            no_templates_tab = QWidget()
            no_templates_layout = QVBoxLayout(no_templates_tab)
            no_templates_label = QLabel(f"No {self.template_type} templates found.")
            no_templates_label.setAlignment(Qt.AlignCenter)
            no_templates_layout.addWidget(no_templates_label)
            self.tabs.addTab(no_templates_tab, "No Templates")
    
    def on_template_selected(self, item):
        """Handle template selection"""
        self.selected_template = item.data(Qt.UserRole)
        self.apply_button.setEnabled(True)
    
    def apply_template(self):
        """Apply the selected template to the character"""
        if not self.selected_template:
            return
        
        # Accept the dialog, returning the selected template
        self.accept()
    
    def get_selected_template(self):
        """Return the selected template"""
        return self.selected_template


def apply_template_to_character(app, template_data, template_type):
    """Apply a template to the character data"""
    if not template_data:
        return False
    
    # Create a unique ID for this template application
    import uuid
    template_id = str(uuid.uuid4())
    
    # Store the template application in the character data
    if "applied_templates" not in app.character_data:
        app.character_data["applied_templates"] = []
    
    # Get the actual template data from the 'data' field
    actual_template = template_data.get("data", template_data)
    
    # Record what this template application changed
    template_changes = {
        "id": template_id,
        "type": template_type,
        "name": actual_template.get("name", "Unnamed Template"),
        "changes": []
    }
    
    # Apply template changes based on type
    if template_type == "size":
        apply_size_template(app, actual_template, template_changes)
    elif template_type == "race":
        apply_race_template(app, actual_template, template_changes)
    elif template_type == "class":
        apply_class_template(app, actual_template, template_changes)
    
    # Add the template changes to the character data
    app.character_data["applied_templates"].append(template_changes)
    
    # Update the UI (but preserve race and class fields)
    current_race = app.race_input.text()
    current_class = app.class_input.text()
    
    app.update_point_total()
    app.load_character_into_ui()
    
    # Restore race and class fields if they were set
    if current_race and current_race.strip():
        app.race_input.setText(current_race)
        app.character_data["race"] = current_race
        
    if current_class and current_class.strip():
        app.class_input.setText(current_class)
        app.character_data["class"] = current_class
    
    return True


def apply_size_template(app, template_data, template_changes):
    """Apply a size template to the character"""
    # Update size field
    if "name" in template_data:
        old_size = app.size_input.text()
        app.size_input.setText(template_data["name"])
        template_changes["changes"].append({
            "field": "size",
            "old_value": old_size,
            "new_value": template_data["name"]
        })
    
    # Apply stat changes by adding to existing stats
    if "stats" in template_data:
        for stat_entry in template_data["stats"]:
            stat = stat_entry.get("stat")
            value = stat_entry.get("value")
            if stat in app.stat_spinners:
                old_value = app.stat_spinners[stat].value()
                new_value = old_value + value  # Add instead of replace
                app.stat_spinners[stat].setValue(new_value)
                template_changes["changes"].append({
                    "field": f"stat_{stat}",
                    "old_value": old_value,
                    "new_value": new_value,
                    "modifier": f"+{value}"  # Record that this was an addition
                })
    
    # Apply attribute changes
    apply_attributes(app, template_data, template_changes)
    
    # Apply defect changes
    apply_defects(app, template_data, template_changes)


def apply_race_template(app, template_data, template_changes):
    """Apply a race template to the character"""
    # Get the template race name - either from the race field or the template name
    template_race = template_data.get("race", template_data.get("name", ""))
    
    if template_race:
        old_race = app.race_input.text()
        
        # If there's already a race, append the new one
        if old_race and old_race.strip():
            new_race = f"{old_race} / {template_race}"
        else:
            new_race = template_race
            
        # Update both the UI and the character data
        app.race_input.setText(new_race)
        app.character_data["race"] = new_race
        
        template_changes["changes"].append({
            "field": "race",
            "old_value": old_race,
            "new_value": new_race
        })
    
    # Check if this race has a specific size template to apply
    if "baseSize" in template_data:
        apply_size_from_template(app, template_data["baseSize"], template_changes)
    
    # Apply stat changes by adding to existing stats
    if "stats" in template_data:
        for stat_entry in template_data["stats"]:
            stat = stat_entry.get("stat")
            value = stat_entry.get("value")
            if stat in app.stat_spinners:
                old_value = app.stat_spinners[stat].value()
                new_value = old_value + value  # Add instead of replace
                app.stat_spinners[stat].setValue(new_value)
                template_changes["changes"].append({
                    "field": f"stat_{stat}",
                    "old_value": old_value,
                    "new_value": new_value,
                    "modifier": f"+{value}"  # Record that this was an addition
                })
    
    # Apply attribute changes
    apply_attributes(app, template_data, template_changes)
    
    # Apply defect changes
    apply_defects(app, template_data, template_changes)


def apply_class_template(app, template_data, template_changes):
    """Apply a class template to the character"""
    # Get the template class name - either from the class field or the template name
    template_class = template_data.get("class", template_data.get("name", ""))
    
    if template_class:
        old_class = app.class_input.text()
        
        # If there's already a class, append the new one
        if old_class and old_class.strip():
            new_class = f"{old_class} / {template_class}"
        else:
            new_class = template_class
            
        # Update both the UI and the character data
        app.class_input.setText(new_class)
        app.character_data["class"] = new_class
        
        template_changes["changes"].append({
            "field": "class",
            "old_value": old_class,
            "new_value": new_class
        })
    
    # Check if this class has a specific size template to apply
    if "baseSize" in template_data:
        apply_size_from_template(app, template_data["baseSize"], template_changes)
    
    # Apply attribute changes
    apply_attributes(app, template_data, template_changes)
    
    # Apply defect changes
    apply_defects(app, template_data, template_changes)


def apply_attributes(app, template_data, template_changes):
    """Apply attribute changes from a template with deduplication and provenance tracking"""
    if "attributes" in template_data:
        import copy
        import uuid
        template_id = template_changes.get("id") or template_changes.get("template_id") or template_changes.get("name")
        for attr in template_data["attributes"]:
            # Use the attribute name and level from the template
            attr_name = attr.get("name", "")
            attr_level = attr.get("level", 1)

            # Fetch full attribute details from attributes.json
            full_attr = app.attributes.get(attr_name, {})
            new_attr = copy.deepcopy(full_attr)
            new_attr["id"] = str(uuid.uuid4())
            new_attr["name"] = attr_name
            new_attr["level"] = attr_level

            # Calculate cost if not present
            cost_per_level = new_attr.get("cost_per_level")
            if cost_per_level is None:
                cost_per_level = 0  # Provide a default value if None
            new_attr["cost"] = cost_per_level * attr_level

            # Deduplication key: name+details
            dedup_key = (new_attr.get("name", "").strip().lower(), str(new_attr.get("details", "")).strip().lower())
            found = False
            for attr_existing in app.character_data.get("attributes", []):
                key_existing = (attr_existing.get("name", "").strip().lower(), str(attr_existing.get("details", "")).strip().lower())
                if dedup_key == key_existing:
                    if "sources" not in attr_existing:
                        attr_existing["sources"] = []
                    if template_id not in attr_existing["sources"]:
                        attr_existing["sources"].append(template_id)
                    found = True
                    break
            if not found:
                new_attr["sources"] = [template_id]
                app.character_data["attributes"].append(new_attr)
                template_changes["changes"].append({
                    "field": "attribute_add",
                    "attribute_id": new_attr["id"],
                    "attribute_data": new_attr
                })
            # Sync special attributes if needed
            from tabs.attributes_tab import sync_attributes
            sync_attributes(app)
            base_name = new_attr.get("base_name", new_attr["name"])
            from tabs.alternate_forms_tab import sync_alternate_forms_from_attributes
            sync_alternate_forms_from_attributes(app)
            if base_name in ["Companion", "Companions"]:
                from tabs.companions_tab import sync_companions_from_attributes
                sync_companions_from_attributes(app)
            elif base_name in ["Item", "Items"]:
                from tabs.items_tab import sync_items_from_attributes
                sync_items_from_attributes(app)
            elif base_name == "Metamorphosis":
                from tabs.metamorphosis_tab import sync_metamorphosis_from_attributes
                sync_metamorphosis_from_attributes(app)
            elif base_name == "Minions":
                from tabs.minions_tab import sync_minions_from_attributes
                sync_minions_from_attributes(app)


def apply_defects(app, template_data, template_changes):
    """Apply defect changes from a template with deduplication and provenance tracking, with detailed debugging output."""
    if "defects" in template_data:
        import copy
        import uuid
        template_id = template_changes.get("id") or template_changes.get("template_id") or template_changes.get("name")
        print(f"[DEBUG] Applying defects from template: {template_id}")
        for defect in template_data["defects"]:
            print(f"[DEBUG] Processing defect: {defect.get('name', '')} details: {defect.get('details', '')}")
            new_defect = copy.deepcopy(defect)
            new_defect["id"] = str(uuid.uuid4())
            if "cost" not in new_defect:
                if "cp_refund" in new_defect:
                    # cp_refund is positive magnitude, subtract it
                    new_defect["cost"] = -abs(new_defect["cp_refund"])
                elif "points" in new_defect:
                    # legacy 'points' field treated as cp_refund
                    new_defect["cost"] = -abs(new_defect["points"])
                elif "rank" in new_defect and "cost_per_rank" in new_defect:
                    new_defect["cost"] = -abs(new_defect["rank"] * new_defect["cost_per_rank"])
                else:
                    # default refund per rank
                    rank = new_defect.get("rank", 1)
                    new_defect["cost"] = -abs(rank)
                    print(f"[DEBUG] Warning: No cost info for defect {new_defect.get('name', 'Unknown')}. Using default refund.")
            if new_defect.get("name", "").lower() == "unique defect":
                if "details" in new_defect and new_defect["details"]:
                    details_text = new_defect["details"].strip("()").strip()
                    if ":" in details_text:
                        new_defect["name"] = details_text.split(":")[0].strip()
                    elif "÷" in details_text or "-" in details_text:
                        parts = details_text.split(" ")
                        if len(parts) >= 2:
                            new_defect["name"] = " ".join(parts[:-1]).strip()
                    else:
                        new_defect["name"] = details_text
                    if not new_defect.get("details_original"):
                        new_defect["details_original"] = new_defect["details"]
            # Deduplication key: name+details
            dedup_key = (new_defect.get("name", "").strip().lower(), str(new_defect.get("details", "")).strip().lower())
            print(f"[DEBUG] Defect deduplication key: {dedup_key}")
            found = False
            for defect_existing in app.character_data.get("defects", []):
                key_existing = (defect_existing.get("name", "").strip().lower(), str(defect_existing.get("details", "")).strip().lower())
                print(f"[DEBUG] Comparing against existing: {key_existing}")
                if dedup_key == key_existing:
                    print(f"[DEBUG] Found existing defect, updating sources for: {key_existing}")
                    if "sources" not in defect_existing:
                        defect_existing["sources"] = []
                    if template_id not in defect_existing["sources"]:
                        defect_existing["sources"].append(template_id)
                    found = True
                    break
            if not found:
                print(f"[DEBUG] Adding new defect: {dedup_key} with sources [{template_id}]")
                new_defect["sources"] = [template_id]
                app.character_data["defects"].append(new_defect)
                template_changes["changes"].append({
                    "field": "defect_add",
                    "defect_id": new_defect["id"],
                    "defect_data": new_defect
                })
        print(f"[DEBUG] Defects in character after processing:")
        for i, d in enumerate(app.character_data["defects"], 1):
            print(f"[DEBUG] Defect {i}: {d.get('name', '')} (Rank: {d.get('rank', d.get('level', '?'))}), details: {d.get('details', '')}, sources: {d.get('sources', [])}")
        # Only sync defects once after all are processed
        from tabs.defects_tab import sync_defects
        sync_defects(app)


def apply_size_from_template(app, size_info, template_changes):
    """Apply a size template based on size information from a race or class template"""
    # Get the size name and key
    size_name = size_info.get("name", "")
    size_key = size_info.get("key", "")
    size_rank = size_info.get("rank", 0)
    
    if not (size_name or size_key):
        return
    
    # Load the size templates
    import os
    import json
    
    base_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    template_path = os.path.join(base_path, "data", "templates", "size_templates.json")
    
    if not os.path.exists(template_path):
        return
    
    try:
        with open(template_path, 'r') as f:
            data = json.load(f)
            size_templates = data.get("sizeTemplates", {}).get("sizes", [])
            
            # Find the matching size template
            matching_template = None
            
            for template in size_templates:
                # Match by key if available
                if size_key and template.get("key") == size_key:
                    matching_template = template
                    break
                # Match by name if key not available
                elif size_name and template.get("name") == size_name:
                    matching_template = template
                    break
                # Match by rank as a last resort
                elif size_rank is not None and template.get("rank") == size_rank:
                    matching_template = template
                    break
            
            # Apply the matching size template if found
            if matching_template:
                # Create a sub-changes list to track size template changes
                size_template_changes = {
                    "id": template_changes["id"],
                    "type": "size",
                    "name": matching_template.get("name", "Unknown Size"),
                    "changes": []
                }
                
                # Apply the size template
                apply_size_template(app, matching_template, size_template_changes)
                
                # Add a note about the size template being applied
                template_changes["changes"].append({
                    "field": "size_template_applied",
                    "size_name": matching_template.get("name", "Unknown Size"),
                    "applied_by": template_changes.get("name", "Unknown Template")
                })
    except Exception as e:
        print(f"Error applying size template: {e}")


def remove_template_from_character(app, template_id):
    """Remove a template from the character"""
    if "applied_templates" not in app.character_data:
        return False
    
    # Find the template application
    template_application = None
    for i, template in enumerate(app.character_data["applied_templates"]):
        if template.get("id") == template_id:
            template_application = template
            app.character_data["applied_templates"].pop(i)
            break
    
    if not template_application:
        return False
    
    # Reverse the changes
    changes = template_application.get("changes", [])
    changes.reverse()  # Process in reverse order
    
    for change in changes:
        field = change.get("field", "")
        
        if field == "size":
            app.size_input.setText(change.get("old_value", ""))
        elif field == "race":
            app.race_input.setText(change.get("old_value", ""))
        elif field == "class":
            app.class_input.setText(change.get("old_value", ""))
        elif field.startswith("stat_"):
            stat = field[5:]  # Remove "stat_" prefix
            if stat in app.stat_spinners:
                app.stat_spinners[stat].setValue(change.get("old_value", 4))
        elif field == "attribute_add":
            # Remove the attribute only if no other template sources remain
            attribute_id = change.get("attribute_id")
            if attribute_id:
                for i, attr in enumerate(app.character_data["attributes"]):
                    if attr.get("id") == attribute_id:
                        # Remove this template from sources
                        sources = attr.get("sources", [])
                        template_id = template_application.get("id") or template_application.get("name")
                        if template_id in sources:
                            sources.remove(template_id)
                        # Remove attribute if no sources left
                        if not sources:
                            app.character_data["attributes"].pop(i)
                        else:
                            attr["sources"] = sources
                        break
        elif field == "defect_add":
            # Remove the defect only if no other template sources remain
            defect_id = change.get("defect_id")
            if defect_id:
                for i, defect in enumerate(app.character_data["defects"]):
                    if defect.get("id") == defect_id:
                        sources = defect.get("sources", [])
                        template_id = template_application.get("id") or template_application.get("name")
                        if template_id in sources:
                            sources.remove(template_id)
                        if not sources:
                            app.character_data["defects"].pop(i)
                        else:
                            defect["sources"] = sources
                        break
    
    # Update the UI
    app.update_point_total()
    app.load_character_into_ui()
    
    # Sync all tabs
    from tabs.attributes_tab import sync_attributes
    sync_attributes(app)
    
    from tabs.defects_tab import sync_defects
    sync_defects(app)
    
    from tabs.alternate_forms_tab import sync_alternate_forms_from_attributes
    sync_alternate_forms_from_attributes(app)
    
    from tabs.companions_tab import sync_companions_from_attributes
    sync_companions_from_attributes(app)
    
    from tabs.items_tab import sync_items_from_attributes
    sync_items_from_attributes(app)
    
    from tabs.metamorphosis_tab import sync_metamorphosis_from_attributes
    sync_metamorphosis_from_attributes(app)
    
    from tabs.minions_tab import sync_minions_from_attributes
    sync_minions_from_attributes(app)
    
    return True


def show_applied_templates_dialog(app):
    """Show a dialog with all applied templates"""
    dialog = QDialog(app)
    dialog.setWindowTitle("Applied Templates")
    dialog.setMinimumWidth(400)
    dialog.setMinimumHeight(300)
    
    layout = QVBoxLayout(dialog)
    
    # Create list widget for templates
    list_widget = QListWidget()
    list_widget.setSelectionMode(QListWidget.SingleSelection)
    
    # Add templates to list
    if "applied_templates" in app.character_data:
        for template in app.character_data["applied_templates"]:
            item = QListWidgetItem(f"{template.get('name', 'Unnamed')} ({template.get('type', 'unknown').title()})")
            item.setData(Qt.UserRole, template.get("id"))
            list_widget.addItem(item)
    
    layout.addWidget(list_widget)
    
    # Buttons
    button_layout = QHBoxLayout()
    
    remove_button = QPushButton("Remove Template")
    remove_button.setEnabled(False)
    remove_button.clicked.connect(lambda: remove_template(app, list_widget))
    
    close_button = QPushButton("Close")
    close_button.clicked.connect(dialog.accept)
    
    button_layout.addWidget(remove_button)
    button_layout.addWidget(close_button)
    layout.addLayout(button_layout)
    
    # Enable remove button when an item is selected
    list_widget.itemSelectionChanged.connect(
        lambda: remove_button.setEnabled(list_widget.currentItem() is not None)
    )
    
    dialog.exec_()


def remove_template(app, list_widget):
    """Remove the selected template"""
    if not list_widget.currentItem():
        return
    
    template_id = list_widget.currentItem().data(Qt.UserRole)
    if not template_id:
        return
    
    # Confirm removal
    reply = QMessageBox.question(
        app, 
        "Remove Template", 
        "Are you sure you want to remove this template? This will undo all changes made by the template.",
        QMessageBox.Yes | QMessageBox.No,
        QMessageBox.No
    )
    
    if reply == QMessageBox.Yes:
        success = remove_template_from_character(app, template_id)
        if success:
            # Remove from list
            list_widget.takeItem(list_widget.currentRow())
            QMessageBox.information(app, "Template Removed", "Template has been removed successfully.")
        else:
            QMessageBox.warning(app, "Error", "Failed to remove template.")
